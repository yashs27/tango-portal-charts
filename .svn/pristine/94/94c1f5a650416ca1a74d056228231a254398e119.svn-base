import { Injectable } from "@angular/core";
import { ConfigService } from "../config/config.service";
import { AuthService } from "../auth/auth.service";
import {
  HttpClient,
  HttpErrorResponse,
  HttpHeaders
} from "@angular/common/http";

@Injectable()

export class ValidationAndVerificationPlatformService {
  authHeaders: HttpHeaders;
  request_uuid: string;
  // pagination: string = "?page_size=20&page_number=1";

  constructor(
    private authService: AuthService,
    private config: ConfigService,
    private http: HttpClient
  ) {}

  /**
   * Retrieves a list of tests.
   * Either following a search pattern or not.
   *
   * @param search [Optional] Test attributes that must be
   *                          matched by the returned list of
   *                          tests.
   */

  getTests(search?): any {
    return new Promise((resolve, reject) => {
      let headers = this.authService.getAuthHeaders();
      let url =
        search != undefined ? this.config.tests + search : this.config.tests;
      this.http
        .get(url, { headers: headers })
        .toPromise()
        .then(response => {
          if (response instanceof Array) {
            resolve(
              response.map(item => {
                return {
                  uuid: item.uuid,
                  name: item.testd.name,
                  vendor: item.testd.vendor,
                  version: item.testd.version,
                  status: item.status,
                  md5: item.md5
                };
              })
            );
          } else {
            reject();
          }
        })
        .catch(err => reject(err.statusText));
    });
  }

  /**
   * Retrieves a Test by UUID
   *
   * @param uuid UUID of the desired Test.
   */

  getOneTest(uuid: string) {
    return new Promise((resolve, reject) => {
      let headers = this.authService.getAuthHeaders();
          //  + "/" + uuid
          this.http.get(this.config.testsDetail, { headers: headers }).toPromise().then(response => {
            if (response instanceof Array) {
              resolve(response.map(item => { return {
            // resolve ({
                // request: console.log('​getOneTest -> request', response),
                // test: console.log('​getOneTest -> test', item.created_at),
                uuid: uuid,
                test: item.details.latency_distribution,
                details: item.details,
                name: "test1",
                vendor: "5gtango",
                version: "0.4",
                timesExecuted: "20",
                author: "author",
                createdAt: "date",
                status: "status",
                lastTimeExecuted: "this is date",
                services: [
                  {
                    sVendor: "svendor",
                    sName: "sname",
                    sVersion: "0.3"
                  },
                  {
                    sVendor: "svendor2",
                    sName: "sname2",
                    sVersion: "0.2"
                  }
                ]
              };
              })
            );
            } else {
              reject();
            }
          })
            .catch(err => reject(err.statusText));
        });

      // setTimeout(() => {
        // this.http
        //   .get(this.config.testsDetail, { headers: headers })
        //   .toPromise()
        //   .then(response => { if (response instanceof Array) {
        //       resolve ({
        //         name: "test1",
        //         vendor: "5gtango",
        //         version: "0.4",
        //         timesExecuted: "20",
        //         author: "author",
        //         createdAt: "date",
        //         status: "status",
        //         lastTimeExecuted: "this is date",
        //         services: [
        //           {
        //             sVendor: "svendor",
        //             sName: "sname",
        //             sVersion: "0.3"
        //           },
        //           {
        //             sVendor: "svendor2",
        //             sName: "sname2",
        //             sVersion: "0.2"
        //           }
        //         ],
        //         server: [
        //           {
        //             details: {
        //               bytes: 7548442,
        //               bytes_transfer_per_sec: 75460.25,
        //               duration_in_microseconds: 100032026,
        //               latency_distribution: [
        //                 { latency_in_microseconds: 43646975, percentile: 50     },
        //                 { latency_in_microseconds: 61702143, percentile: 75     },
        //                 { latency_in_microseconds: 72810495, percentile: 90     },
        //                 { latency_in_microseconds: 79429631, percentile: 99     },
        //                 { latency_in_microseconds: 81264639, percentile: 99.9   },
        //                 { latency_in_microseconds: 82509823, percentile: 99.99  },
        //                 { latency_in_microseconds: 82837503, percentile: 99.999 },
        //                 { latency_in_microseconds: 82837503, percentile: 100    }
        //               ],
        //               requests: 40366,
        //               requests_per_sec: 403.53
        //             },
        //             created_at: "2018-07-24T16:47:25.323+00:00",
        //             instance_uuid: "a7b1800d-dbb6-4d8c-9f19-4c7bb67277ad",
        //             package_id: "0485d59e-8b3d-4edf-a22c-4e955b69c49a",
        //             service_uuid: "7245632e-d96b-4415-a662-5071003f147d",
        //             status: "SUCCESS",
        //             sterr: "",
        //             stout: "....omited due is too long....",
        //             updated_at: "2018-07-24T16:47:25.323+00:00",
        //             uuid: "5b57581d6612a10001000005"
        //           }
        //         ]
        //       });
        //     }
        //     else {
        //       reject();
        //     }
        //   });
      // }, 1000);
    // });
  }
}
